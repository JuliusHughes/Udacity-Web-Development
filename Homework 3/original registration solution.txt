form="""
    <form method="post">
    <h2>Signup</h2>
    <br>
    <label>
    Username
    <input name="username" value="%(username)s" type="text">
    <b style="color: red">%(user_error)s</b>
    </label>
    <br>
    <label>
    Password
    <input name="password" type="password">
    <b style="color: red">%(pass_error)s</b>
    </label>
    <br>
    <label>
    Verify Password
    <input name="verify" type="password">
    <b style="color: red">%(verify_error)s</b>
    </label>
    <br>
    <label>
    Email (Optional)
    <input name="email" value="%(email)s" type="text">
    <b style="color: red">%(email_error)s</b>
    </label>
    <br>
    <input type="submit">
    </form>
"""


def valid_username(username):
    return USER_RE.match(username)


def valid_password(password):
    return PASSWORD_RE.match(password)


def valid_email(email):
    return EMAIL_RE.match(email)


def valid_verify(verify, password):
    if verify == password:
        return True
    else:
        return False


def make_salt():
    # Your code here
    salt_string = ""
    for x in range(5):
        salt_string += random.choice(string.ascii_letters)

    return salt_string


def make_cookie_hash(s, salt=None):
    # Your code here
    if not salt:
        salt = make_salt()

    hashed_cookie = hashlib.sha256(s + salt).hexdigest()

    return "%s|%s|%s" % (s, hashed_cookie, salt)


def valid_cookie(s, h):
    salt = h.split("|")[2]
    hashed_cookie = make_cookie_hash(s, salt)

    if h == hashed_cookie:
        return s
    else:
        return None


class UserAccounts:
    user_accounts = []


class MainHandler(webapp2.RequestHandler):
    def write_form(self, user_error="", pass_error="", verify_error="", email_error="", username="", email=""):
        self.response.out.write(form % {"user_error": cgi.escape(user_error),
                                        "pass_error": pass_error,
                                        "verify_error": verify_error,
                                        "email_error": email_error,
                                        "username": cgi.escape(username),
                                        "email": cgi.escape(email)})

    def get(self):
        self.write_form()

    def post(self):
        global user_name
        global accounts
        accounts = UserAccounts()

        user_id_cookie_val = self.request.cookies.get('user_id', '2000')
        user_id = 2000

        user_name = self.request.get('username')
        user_password = self.request.get('password')
        user_email = self.request.get('email')
        user_verify = self.request.get('verify')

        name = valid_username(user_name)
        password = valid_password(user_password)
        email = valid_email(user_email)
        verify = valid_verify(user_verify, user_password)
        account_exist = 0

        user_error = ""
        pass_error = ""
        verify_error = ""
        email_error = ""

        if not name:
            user_error = "That's not a valid username."
        elif len(accounts.user_accounts) > 0:
                for x in accounts.user_accounts:
                    if user_name == x:
                        user_error = "That username already exists."
                        account_exist = 1

        if not password:
            pass_error = "That wasn't a valid password."

        if password and not verify:
            verify_error = "Your passwords didn't match."

        if len(user_email) > 0 and not email:
            email_error = "That's not a valid email."

        if (not (name and password and verify)) or (account_exist == 1) or (user_email and not email):
            self.write_form(user_error, pass_error, verify_error, email_error, user_name, user_email)
        else:
            if user_id_cookie_val:
                if user_id == 2000:
                    pass
                else:
                    id_str = user_id_cookie_val.split("|")[0]
                    cookie_val = valid_cookie(id_str, user_id_cookie_val)

                    if cookie_val:
                        user_id = int(cookie_val)

            user_id += 1

            accounts.user_accounts.append(user_name)

            new_cookie_val = make_cookie_hash(str(user_id))

            self.response.headers.add_header('set-cookie', 'user_id=%s' % new_cookie_val)

            self.redirect("/welcome")


class ThanksHandler(webapp2.RequestHandler):
    def get(self):
        user_id_cookie_val = self.request.cookies.get('user_id')
        id_str = user_id_cookie_val.split("|")[0]

        self.response.out.write("Welcome %s" % user_name)

        if user_id_cookie_val:
            cookie_val = valid_cookie(id_str, user_id_cookie_val)

            if cookie_val is None:
                self.redirect("/signup")


app = webapp2.WSGIApplication([
    ('/signup', MainHandler), ('/welcome', ThanksHandler)], debug=True)
